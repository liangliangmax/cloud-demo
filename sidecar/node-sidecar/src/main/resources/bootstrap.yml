eureka:
     instance:
        health-check-url-path: ${server.servlet.context-path}/actuator/health
        # docker 部署开启
        prefer-ip-address: true
        ip-address: ${host_ip:localhost}
        metadata-map:
          # 用来拦截/actutor/* 监控用的。要不然只要知道ip和端口就能看到监控信息。
          # 这个参数在注册到eureka中时会带入eureka中，当客户端访问时候会调用
          # de.codecentric.boot.admin.server.web.client.BasicAuthHttpHeaderProvider这个类，将这个信息放到消息头里面
          user:
            name: neupals
            password: Neupals2019
     client:
        registerWithEureka: true
        fetchRegistry: true
        serviceUrl:
            defaultZone: http://${eureka_host:localhost}:${eureka_port:8761}/eureka/                    # docker 部署开启


spring:
    profiles:
      active: dev
    application:
        name: sidecar-server
    cloud:
      config:
        discovery:
          enabled: true
          service-id: config-server
        fail-fast: true
        retry:
          max-attempts: 6   # 配置重试次数，默认为6
          max-interval: 2000  # 最大间隔时间，默认2000ms
          initial-interval: 1000  # 初始重试间隔时间，默认1000ms
          multiplier: 1.1   # 间隔乘数，默认1.1

        #指定连接config服务的用户名和密码，因为config项目是受security保护的
        username: ${security_name:user}
        password: ${security_password:neuabc}

      loadbalancer:
        retry:
          enabled: true


server:
  port: 8759 #启动端口
  tomcat:
      max-connections: 1024
  servlet:
    context-path:

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS

sidecar:
    port: 3000
    health-uri: http://localhost:${sidecar.port}/health


hystrix:
    command:
        default:
            execution:
                timeout:
                    enabled: false